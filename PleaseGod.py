# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'QT2Try.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import pkg_resources
pkg_resources.require("pandas==1.1.3")
import pandas as pd
pkg_resources.require("xlrd==1.2.0")
import xlrd



from PyQt5 import QtCore, QtGui, QtWidgets
from  PyQt5.QtWidgets  import *
from  PyQt5.uic  import  loadUi
from MpIWedget import MpIWedget

from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg, NavigationToolbar2QT as NavigationToolbar
import  numpy  as  np
import  random
from itertools import count
import pandas as pd
import numpy as np

import time
import math

flag=True
x=0

data_set1 = pd.read_csv("ecg1.csv")
yb = data_set1.iloc[:, 1].values
xa = data_set1.iloc[:, 0].values
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation




class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(827, 567)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(499, -1, 321, 461))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.dockWidget_3 = QtWidgets.QDockWidget(self.horizontalLayoutWidget_2)
        self.dockWidget_3.setObjectName("dockWidget_3")
        self.dockWidgetContents_3 = QtWidgets.QWidget()
        self.dockWidgetContents_3.setObjectName("dockWidgetContents_3")
        self.listWidget_2 = QtWidgets.QListWidget(self.dockWidgetContents_3)
        self.listWidget_2.setGeometry(QtCore.QRect(0, 41, 321, 401))
        self.listWidget_2.setObjectName("listWidget_2")
        item = QtWidgets.QListWidgetItem()
        self.listWidget_2.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.listWidget_2.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.listWidget_2.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.listWidget_2.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.listWidget_2.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.listWidget_2.addItem(item)
        self.horizontalLayoutWidget_3 = QtWidgets.QWidget(self.dockWidgetContents_3)
        self.horizontalLayoutWidget_3.setGeometry(QtCore.QRect(0, 0, 321, 73))
        self.horizontalLayoutWidget_3.setObjectName("horizontalLayoutWidget_3")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_3)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.checkBox_3 = QtWidgets.QCheckBox(self.horizontalLayoutWidget_3)
        self.checkBox_3.setObjectName("checkBox_3")
        self.horizontalLayout_3.addWidget(self.checkBox_3)
        self.label_2 = QtWidgets.QLabel(self.horizontalLayoutWidget_3)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_3.addWidget(self.label_2)
        self.textEdit_2 = QtWidgets.QTextEdit(self.horizontalLayoutWidget_3)
        self.textEdit_2.setObjectName("textEdit_2")
        self.horizontalLayout_3.addWidget(self.textEdit_2)
        self.checkBox_4 = QtWidgets.QCheckBox(self.horizontalLayoutWidget_3)
        self.checkBox_4.setObjectName("checkBox_4")
        self.horizontalLayout_3.addWidget(self.checkBox_4)
        self.pushButton_2 = QtWidgets.QPushButton(self.horizontalLayoutWidget_3)
        self.pushButton_2.setObjectName("pushButton_2")
        self.horizontalLayout_3.addWidget(self.pushButton_2)
        self.dockWidget_3.setWidget(self.dockWidgetContents_3)
        self.horizontalLayout_2.addWidget(self.dockWidget_3)
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(0, 459, 821, 91))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.pushButton_6 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.pushButton_6.setObjectName("pushButton_6")
        self.horizontalLayout_4.addWidget(self.pushButton_6)
        self.pushButton_11 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.pushButton_11.setObjectName("pushButton_11")
        self.horizontalLayout_4.addWidget(self.pushButton_11)
        self.pushButton_10 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.pushButton_10.setObjectName("pushButton_10")
        self.horizontalLayout_4.addWidget(self.pushButton_10)
        self.pushButton_8 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.pushButton_8.setObjectName("pushButton_8")
        self.horizontalLayout_4.addWidget(self.pushButton_8)
        self.pushButton_9 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.pushButton_9.setObjectName("pushButton_9")
        self.horizontalLayout_4.addWidget(self.pushButton_9)
        self.pushButton_7 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.pushButton_7.setObjectName("pushButton_7")
        self.horizontalLayout_4.addWidget(self.pushButton_7)
        self.pushButton_5 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.pushButton_5.setObjectName("pushButton_5")
        self.horizontalLayout_4.addWidget(self.pushButton_5)
        self.pushButton_4 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.pushButton_4.setObjectName("pushButton_4")
        self.horizontalLayout_4.addWidget(self.pushButton_4)
        self.pushButton_3 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.pushButton_3.setObjectName("pushButton_3")
        self.horizontalLayout_4.addWidget(self.pushButton_3)
        self.verticalLayout.addLayout(self.horizontalLayout_4)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(190, 40, 75, 23))
        self.pushButton.setObjectName("pushButton")
        self.MpIWedget = MpIWedget(self.centralwidget)
        self.MpIWedget.setGeometry(QtCore.QRect(30, 80, 441, 301))
        self.MpIWedget.setObjectName("MpIWedget")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 827, 21))
        self.menubar.setObjectName("menubar")
        self.menufile = QtWidgets.QMenu(self.menubar)
        self.menufile.setObjectName("menufile")
        self.menuedit = QtWidgets.QMenu(self.menubar)
        self.menuedit.setObjectName("menuedit")
        self.menuview = QtWidgets.QMenu(self.menubar)
        self.menuview.setObjectName("menuview")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.menubar.addAction(self.menufile.menuAction())
        self.menubar.addAction(self.menuedit.menuAction())
        self.menubar.addAction(self.menuview.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.pushButton.clicked.connect(self.UpdateGraph)


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.dockWidget_3.setWindowTitle(_translate("MainWindow", "Annoations"))
        __sortingEnabled = self.listWidget_2.isSortingEnabled()
        self.listWidget_2.setSortingEnabled(False)
        item = self.listWidget_2.item(0)
        item.setText(_translate("MainWindow", "ECG"))
        item = self.listWidget_2.item(1)
        item.setText(_translate("MainWindow", "EMG"))
        item = self.listWidget_2.item(2)
        item.setText(_translate("MainWindow", "EEG"))
        item = self.listWidget_2.item(3)
        item.setText(_translate("MainWindow", "ECG_SP"))
        item = self.listWidget_2.item(4)
        item.setText(_translate("MainWindow", "EMG_SP"))
        item = self.listWidget_2.item(5)
        item.setText(_translate("MainWindow", "EEG_SP"))
        self.listWidget_2.setSortingEnabled(__sortingEnabled)
        self.checkBox_3.setText(_translate("MainWindow", "relative"))
        self.label_2.setText(_translate("MainWindow", "filler"))
        self.checkBox_4.setText(_translate("MainWindow", "Inv."))
        self.pushButton_2.setText(_translate("MainWindow", "More"))
        self.pushButton_6.setText(_translate("MainWindow", "start"))
        self.pushButton_11.setText(_translate("MainWindow", "pause"))
        self.pushButton_10.setText(_translate("MainWindow", "next"))
        self.pushButton_8.setText(_translate("MainWindow", "back"))
        self.pushButton_9.setText(_translate("MainWindow", "PushButton"))
        self.pushButton_7.setText(_translate("MainWindow", "PushButton"))
        self.pushButton_5.setText(_translate("MainWindow", "PushButton"))
        self.pushButton_4.setText(_translate("MainWindow", "PushButton"))
        self.pushButton_3.setText(_translate("MainWindow", "Print"))
        self.pushButton.setText(_translate("MainWindow", "PushButton"))
        self.menufile.setTitle(_translate("MainWindow", "file"))
        self.menuedit.setTitle(_translate("MainWindow", "edit"))
        self.menuview.setTitle(_translate("MainWindow", "view"))


    def UpdateGraph(self):
        fs = 500
        f = random.randint(1, 100)
        ts = 1 / fs
        length_of_signal = 100
        t = np.linspace(0, 1, length_of_signal)

        cosinus_signal = np.cos(2 * np.pi * f * t)
        sinus_signal = np.sin(2 * np.pi * f * t)
        self.MpIWedget.canvas.axes.plot(xa, yb)
        self.MpIWedget.canvas.draw()
        self.MpIWedget.canvas.axes.clear()




        self.MpIWedget.canvas.axes.set_title(' Cosinus ')



        def animate(i):
            print("HEllo")
            global x
            global flag
            if not flag:
                self.ani.event_source.stop()
            else:
                x=i
                data_set1= pd.read_csv('ecg1.csv')
                xa=data_set1.iloc[2*int(((i-100)+abs(i-100))/2):2*i,0].values
                y1=data_set1.iloc[2*int(((i-100)+abs(i-100))/2):2*i,1].values

                plt.cla()
                axes = plt.gca()
                axes.set_ylim([min(yb),max(yb)])
                axes.plot(xa, y1, label='Channel 1')
                plt.legend(loc='upper left')
                plt.tight_layout()

        self.ani = FuncAnimation(plt.gcf(), animate, interval=0.001)
        plt.tight_layout()
        plt.show()
#Zoom mot working as the difine of x and y in main function
    def zoom(axis, valueX, valueY):
        print("Hello")
        if axis == "x":
            plt.xscale('symlog', linthreshx=valueX)
        elif axis == "y":
            plt.yscale('symlog', linthreshy=valueY)
        elif axis == "x&y":
            plt.xscale('symlog', linthreshx=valueX)
            plt.yscale('symlog', linthreshy=valueY)
        else:
            print("You must Type 'x' or 'y' or 'x&y'")

        data = np.genfromtxt("ecg1.csv", delimiter=",", names=["x", "y"])

        zoom('x', 2000, 5000)
        self.MpIWedget.canvas.axes.plot(data['x'], data['y'])

        self.MpIWedget.canvas.draw()


    # def start(self):
    #     plt.close()
    #     fig, ax = plt.subplots()
    #     global x
    #     x = 0
    #     global flag
    #     flag = True
    #     data_set1 = pd.read_csv("ecg1.csv")
    #     yb = data_set1.iloc[0:-1, 1].values
    #     xa = data_set1.iloc[:, 0].values
    #
    #
    #
    #  def animate(i):
    #         global x
    #         global flag
    #         if not flag:
    #             self.ani.event_source.stop()
    #         else:
    #             x = i
    #             data_set1 = pd.read_csv("ecg1.csv")
    #             xa = data_set1.iloc[2 * int(((i - 100) + abs(i - 100)) / 2):2 * i, 0].values
    #             y1 = data_set1.iloc[2 * int(((i - 100) + abs(i - 100)) / 2):2 * i, 1].values
    #             print(y1)
    #             plt.cla()
    #             axes = plt.gca()
    #             axes.set_ylim([min(yb), max(yb)])
    #             axes.plot(xa, y1, label='Channel 1')
    #             plt.legend(loc='upper left')
    #             plt.tight_layout()
    #
    #     self.ani = FuncAnimation(plt.gcf(), animate, interval=0.001)
    #     plt.tight_layout()
    #     plt.show()
    #




if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
